# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.messages_pb2 as messages__pb2


class ServerStub(object):
    """rpc Endpoint

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiateHandshake = channel.unary_unary(
            '/messages.Server/InitiateHandshake',
            request_serializer=messages__pb2.ClientHello.SerializeToString,
            response_deserializer=messages__pb2.ServerHello.FromString,
        )
        self.Integrity = channel.unary_unary(
            '/messages.Server/Integrity',
            request_serializer=messages__pb2.VerifyIntegrity.SerializeToString,
            response_deserializer=messages__pb2.VerifyIntegrity.FromString,
        )
        self.TransferData = channel.unary_unary(
            '/messages.Server/TransferData',
            request_serializer=messages__pb2.EncryptedData.SerializeToString,
            response_deserializer=messages__pb2.Status.FromString,
        )


class ServerServicer(object):
    """rpc Endpoint

    """

    def InitiateHandshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Integrity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'InitiateHandshake': grpc.unary_unary_rpc_method_handler(
            servicer.InitiateHandshake,
            request_deserializer=messages__pb2.ClientHello.FromString,
            response_serializer=messages__pb2.ServerHello.SerializeToString,
        ),
        'Integrity': grpc.unary_unary_rpc_method_handler(
            servicer.Integrity,
            request_deserializer=messages__pb2.VerifyIntegrity.FromString,
            response_serializer=messages__pb2.VerifyIntegrity.SerializeToString,
        ),
        'TransferData': grpc.unary_unary_rpc_method_handler(
            servicer.TransferData,
            request_deserializer=messages__pb2.EncryptedData.FromString,
            response_serializer=messages__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'messages.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Server(object):
    """rpc Endpoint

    """

    @staticmethod
    def InitiateHandshake(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/InitiateHandshake',
                                             messages__pb2.ClientHello.SerializeToString,
                                             messages__pb2.ServerHello.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Integrity(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/Integrity',
                                             messages__pb2.VerifyIntegrity.SerializeToString,
                                             messages__pb2.VerifyIntegrity.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferData(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/TransferData',
                                             messages__pb2.EncryptedData.SerializeToString,
                                             messages__pb2.Status.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
